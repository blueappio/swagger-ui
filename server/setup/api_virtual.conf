map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen         80;
    server_name    api.blueapp.io;

    # Add HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";

    root /home/ec2-user/public/api/;

    access_log "/home/ec2-user/logs/api/access.log";
    error_log "/home/ec2-user/logs/api/error.log" error;

    charset utf-8;

    default_type  application/octet-stream;
    sendfile        on;

    # enable gzip
    gzip on;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_min_length  1000;
    gzip_proxied any;
    gzip_buffers 16 8k;

    # we only gzip these mime-types (since there's no use to gzip jpegs)
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # tell-client to cache all 'assets'
    location ~* \.(?:jpg|jpeg|gif|png|ico|gz|svg|svgz|mp4|ogg|ogv|webm)$ {
        expires 1M;
        access_log off;
        add_header Cache-Control "public";
    }

    # disable logging for some `common` files
    # Disable logging for favicon
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    # Disable logging for robots.txt
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Prevent clients from accessing hidden files (starting with a dot)
    location ~* (^|/)\. {
        return 403;
    }

    # Prevent clients from accessing to backup/config/source files
    location ~* (\.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)|~)$ {
        return 403;
    }

    # reverse-proxy here, if your have multiple machine/cores would be better to use UPSTREAM so nginx can load-balance requests
    try_files $uri $uri/ @mynodeserver;
    location @mynodeserver {
        proxy_redirect off;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   Host $http_host;
        proxy_set_header   X-NginX-Proxy true;
        proxy_set_header   Connection "";
        #proxy_pass         http://api_upstream;
    }

}
